Istio E2E Encryption Configuration Deployed
Components Deployed
{{- if .Values.certificate.enabled }}

TLS Certificate: demo-app-tls for demo-app.127.0.0.1.nip.io (in istio-ingress)
{{- end }}
{{- if .Values.gateway.enabled }}

Istio Gateway: demo-app-gateway (in istio-ingress, configures existing ingress gateway)
{{- end }}
{{- if .Values.virtualService.enabled }}

VirtualService: demo-app-vs (routes /api/ → backend-app, / → frontend-app)
{{- end }}
{{- if .Values.destinationRule.enabled }}

DestinationRules: frontend-app-dr, backend-app-dr (mTLS enabled)
{{- end }}
{{- if .Values.peerAuthentication.enabled }}

PeerAuthentication: default-peer-auth (strict mTLS in my-demo namespace)
{{- end }}

Application Access
https://demo-app.127.0.0.1.nip.io

Verification Commands
Check certificate:
kubectl get certificate demo-app-tls -n istio-ingress
kubectl describe certificate demo-app-tls -n istio-ingress

Check gateway:
kubectl get gateway demo-app-gateway -n istio-ingress
kubectl describe gateway demo-app-gateway -n istio-ingress

Check routing:
kubectl get virtualservice demo-app-vs -n my-demo
kubectl describe virtualservice demo-app-vs -n my-demo

Check mTLS configuration:
kubectl get destinationrule -n my-demo
kubectl get peerauthentication default-peer-auth -n my-demo

Test access (K3D port-forward):
kubectl port-forward -n istio-ingress svc/istio-ingressgateway 8443:443 8080:80
curl -v http://demo-app.127.0.0.1.nip.io:8080
curl -k -v https://demo-app.127.0.0.1.nip.io:8443
curl -k -v https://demo-app.127.0.0.1.nip.io:8443/api/